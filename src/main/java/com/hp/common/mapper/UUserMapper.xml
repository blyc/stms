<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hp.common.dao.UUserMapper" >
  <resultMap id="BaseResultMap" type="com.hp.common.model.UUser" >
    <id column="uid" property="uid" jdbcType="BIGINT" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="pswd" property="pswd" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="BIGINT" />
    <result column="cid" property="cid" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    uid, nickname, email, pswd, create_time, last_login_time,status, cid
  </sql>
  <sql id="limit_sql">
  	   <if test="page_sql != null and page_sql != ''">
      	${page_sql}
      </if>
  </sql>
  
  <sql id="where_all">
  	<where>
  	<if test="findContent != null and findContent !='' " >
        and (
        LOWER(nickname) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
        LOWER(email) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
        )
      </if>
      </where>
  </sql>

  <select id="findAll" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user 
    <include refid="where_all"/>
    <include refid="limit_sql" />
  </select>

  <select id="findCount" resultMap="BaseResultMap" >
 	 select count(uid) from  u_user
  	<include refid="where_all" />
  </select>
  
  <!-- 用户权限分配的分页查询 -->
  <select id="findUserAndRole" resultType="com.hp.permission.bo.UserRoleAllocationBo">
  	select u.uid,u.nickname,u.email,u.create_time,u.last_login_time,u.status ,u.cid ,group_concat(ur.name) roleNames,group_concat(ur.rid)roleIds from
	 u_user u
	left join u_user_role uur on uur.uid = u.uid
	left join u_role ur on ur.rid = uur.rid
	<where>
  	<if test="findContent != null and findContent !='' " >
        and (
        LOWER(u.nickname) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
        LOWER(u.email) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
        )
      </if>
      </where>
	group by u.uid
    <include refid="limit_sql" />
  </select>
  <select id="selectRoleByUserId" resultType="com.hp.permission.bo.URoleBo">
  		
		select ur.rid,ur.name,ur.type,ifnull(uu.uid,0)marker,uu.uid userId from u_role ur
		left join u_user_role uur on uur.rid = ur.rid
		left join (select uid from u_user where uid =#{id,jdbcType=BIGINT}) uu on uu.uid = uur.uid
		group by ur.rid
  		<!-- 
  		勾选不上自己调整sql语句，由于mysql版本不同，所以不支持，可以看看Demo项目 http://shiro.itboy.net
  		select ur.id,ur.name,ur.type,ifnull(uur.uid,0) marker from u_role ur
		left join(select * from u_user_role where uid=#{id,jdbcType=BIGINT}) uur on uur.rid = ur.id
		 -->
  </select>
  
  <!-- 登录 -->
  <select id="login" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user
    where email = #{email,jdbcType=VARCHAR} and  pswd = #{pswd,jdbcType=VARCHAR} 
  </select>
  <!-- 根据邮箱|帐号查询 -->
  <select id="findUserByEmail" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user
    where email = #{email,jdbcType=VARCHAR} 
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from u_user
    where uid = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from u_user
    where uid = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" useGeneratedKeys="false" keyProperty="uid" parameterType="com.hp.common.model.UUser" >
    insert into u_user (uid, nickname, email,
      pswd, create_time, last_login_time,status,cid
      )
    values (#{uid,jdbcType=BIGINT}, #{nickname,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
      #{pswd,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{lastLoginTime,jdbcType=TIMESTAMP},#{status,jdbcType=BIGINT},
      #{cid,jdbcType=BIGINT})
  </insert>

  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.hp.common.model.UUser" >
    insert into u_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        uid,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="pswd != null" >
        pswd,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastLoginTime != null" >
        last_login_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="cid != null" >
        cid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="pswd != null" >
        #{pswd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null" >
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIGINT}
      </if>
      <if test="cid != null" >
        #{cid,jdbcType=BIGINT}
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.hp.common.model.UUser" >
    update u_user
    <set >
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="pswd != null" >
        pswd = #{pswd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        cid = #{cid,jdbcType=BIGINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.hp.common.model.UUser" >
    update u_user
    set nickname = #{nickname,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      pswd = #{pswd,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=BIGINT},
      cid = #{cid,jdbcType=BIGINT}
    where uid = #{uid,jdbcType=BIGINT}
  </update>
</mapper>
