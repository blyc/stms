<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hp.common.dao.UPositionMapper">
    <resultMap id="BaseResultMap" type="com.hp.common.model.UPosition">
        <id column="pid" property="pid" jdbcType="BIGINT"/>
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="level" property="level" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ResultMapForFindAllWithNum" type="com.hp.common.model.UPosition">
        <id column="pid" property="pid" jdbcType="BIGINT"/>
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="num" property="num" jdbcType="BIGINT"/>
    </resultMap>

    <sql id="Base_Column_List">
    pid, id, name, level, content, description
   </sql>

    <sql id="limit_sql">
        <if test="page_sql != null and page_sql != ''">
            ${page_sql}
        </if>
    </sql>

    <sql id="where_all">
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(name) like LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
                )
            </if>
        </where>
    </sql>

    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from u_position
        <include refid="where_all"/>
        <include refid="limit_sql"/>
    </select>

    <select id="findAllWithNum" resultMap="ResultMapForFindAllWithNum">
        SELECT
          u_position.pid,u_position.id,u_position.name,COUNT(u_employee.pid) num
        FROM u_position left join u_employee
        on u_position.pid = u_employee.pid
        <include refid="where_all"/>
        GROUP BY pid
        <include refid="limit_sql"/>
    </select>

    <select id="findCount" resultMap="BaseResultMap">
        select count(pid) from u_position
        <include refid="where_all"/>
    </select>

    <select id="findAllPosition" resultMap="BaseResultMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from u_position
        <where>
            <if test="pid != null and pid !='' ">
                and (pid = #{pid,jdbcType=BIGINT})
            </if>
            <if test="name != null and name !='' ">
                and (name = #{name,jdbcType=BIGINT})
            </if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="pid" parameterType="com.hp.common.model.UPosition">
      insert into u_position(pid, id, name, level, content, description)
      values(#{pid,jdbcType=BIGINT},#{id,jdbcType=VARCHAR},#{name,jdbcType=VARCHAR},
      #{level,jdbcType=VARCHAR},#{content,jdbcType=VARCHAR},#{description,jdbcType=VARCHAR})
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.hp.common.model.UPosition">
        update u_position
        <set>
            <if test="id != null">
                id = #{id,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
        </set>
        where pid=#{pid,jdbcType=BIGINT}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
      delete from u_position
      where pid = #{pid,jdbcType=BIGINT}
    </delete>
</mapper>
